import 'package:flutter/material.dart';
import 'package:speech_recognition/speech_recognition.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(primarySwatch: Colors.red),
      debugShowCheckedModeBanner: false,
      home: VoiceHome(),
    );
  }
}

class VoiceHome extends StatefulWidget {
  @override
  _VoiceHomeState createState() => _VoiceHomeState();
}

class _VoiceHomeState extends State<VoiceHome> {
  SpeechRecognition _speechRecognition;
  bool _isAvailable = false;
  bool _isListening = false;

  String _currentLocale = '';
  String transcription = '';

  Color currentColor = Colors.amber;

  void changeColor(Color color) => setState(() => currentColor = color);

  final hex = [
    '444444',
    '666666',
    '888888',
    '999999',
    'AAAAAA',
    'BBBBBB',
    'CCCCCC',
    'DDDDDD',
    'EEEEEE',
    'F0F0F0',
    '006600',
    '008800',
    '00AA00',
    '00BB00',
    '00CC00',
    '00FF00',
    '44FF44',
    'AAFFAA',
    'DDFFDD',
    'EEFFEE',
    '006625',
    '008840',
    '00A050',
    '00B04A',
    '00DD80',
    '00FF95',
    '40FFAA',
    'A0FFCC',
    'BEFFDE',
    'EEFEEE',
    '005533',
    '007755',
    '009977',
    '00AA88',
    '00CCAA',
    '00FFBB',
    '33FFDD',
    '88FFEE',
    'AAFFEE',
    'CCFFEF',
    '006666',
    '008888',
    '00AAAA',
    '00CCCC',
    '00DDDD',
    '00FFFF',
    '8AAFFF',
    'C0FFFF',
    'D0FFFF',
    'DDFFFF',
    '004477',
    '005588',
    '007799',
    '0099BB',
    '00BBDD',
    '00D8FF',
    '11DFFF',
    'AAEEFF',
    'CCEEFF',
    'F0FFFF',
    '002488',
    '004090',
    '2266AA',
    '2288CC',
    '2299DD',
    '00AAFF',
    '44BBFF',
    '99CCFF',
    'BBDEFF',
    'DDEEFF',
    '000080',
    '000099',
    '0000BB',
    '0000DD',
    '0000EE',
    '0000FF',
    '6088FF',
    '66AAFF',
    'AACDFF',
    'BBDDFF',
    '300077',
    '300089',
    '4000AB',
    '5000CD',
    '7000DE',
    '8000FF',
    '7744FF',
    'AFAFFF',
    'BBCCFF',
    'DEEEFF',
    '500077',
    '5000AC',
    '7000BC',
    '7500CD',
    '8500DE',
    'A033FF',
    'AA77FF',
    'AB99FF',
    'CDCDFF',
    'EEEEFF',
    '400075',
    '600095',
    '8000AB',
    '9000CD',
    '9A00EE',
    'AB00F0',
    'BB55FF',
    'CC77FF',
    'EECDFF',
    'DDDEFF',
    '600070',
    '800095',
    'AA00AB',
    'AA00CD',
    'AB00CC',
    'CC00DD',
    'EE44FF',
    'EE99FF',
    'EEBBFF',
    'EEEEFF',
    '700070',
    '990099',
    'AA00AA',
    'BB00BB',
    'DD00DD',
    'FF00FF',
    'FF66FF',
    'FF99FF',
    'FFCCFF',
    'FEDDFF',
    '600040',
    '770055',
    '990077',
    'BB0099',
    'DD00AA',
    'FF00BB',
    'FF44DD',
    'FF77EE',
    'FFBBEE',
    'FFEEFF',
    '770033',
    '990055',
    'AA0060',
    'CC0060',
    'DD0070',
    'FF0088',
    'FF4488',
    'FF99AA',
    'FFAACC',
    'FFDDEE',
    '950000',
    'AF0000',
    'BB0000',
    'CC0000',
    'DD0000',
    'FF0000',
    'FF7777',
    'FFBBBB',
    'FFDDDD',
    'FFEEEE',
    '663300',
    '884400',
    '995500',
    'BB5500',
    'DD7000',
    'FF8800',
    'FFAA77',
    'FFCC99',
    'FFDDCC',
    'FFEEDD',
    '664400',
    '996600',
    'AA6000',
    'BB7700',
    'DD9900',
    'FFAA00',
    'FFCC33',
    'FFEEAA',
    'FFEEDD',
    'FFEFDD',
    '665000',
    '886600',
    '997700',
    'BB9900',
    'DDBB00',
    'FFCC00',
    'FFDD77',
    'FFEF99',
    'FFEFCC',
    'FFEFDE',
    '605000',
    '776600',
    '998800',
    'BBAA00',
    'DDCC00',
    'FFEE00',
    'FFEE66',
    'FFEE99',
    'FFEFBB',
    'FFFFDC',
    '555500',
    '777700',
    '999900',
    'CCCC00',
    'EEEE00',
    'FFFF00',
    'FFFF44',
    'FFFF99',
    'FFFFBB',
    'FFFFDD',
    '335500',
    '557700',
    '779900',
    'AACC00',
    'CCEE00',
    'DDFF00',
    'DEFF44',
    'EEFF77',
    'EFEFCC',
    'FEFFEE',
    '388600',
    '499700',
    '6BB900',
    '8DDA00',
    '9EEB00',
    'AFFC00',
    'CCFD44',
    'DDFE77',
    'EDFFCC',
    'EFFFDD',
    'D02090',
    'CC309A',
    'C040A0',
    'BB50AA',
    'B060AA',
    'AA90AA',
    'AAB0AA',
    'BBC0BB',
    'BBDDBB',
    'AADDAA',
    'E005BB',
    'D060BB',
    'DD69BB',
    'D060C0',
    'BB70BB',
    'BB90BB',
    'BBAABB',
    'BBD0BB',
    '90D090',
    '70D070',
    'EE00EE',
    'EE80EE',
    'EEB0EE',
    'EECEEE',
    'EEE0EE',
    'DEEEDE',
    'CCEECC',
    'AAEEAA',
    '22CC22',
    '40AA40',
    'CC00CC',
    'CC60CC',
    'CC85CC',
    'CCAACC',
    'BBCCBB',
    'AACCAA',
    '80CC80',
    '44CC44',
    '90C060',
    'A0B040',
    'AA00AA',
    'AA60AA',
    'B08DB0',
    '9FAA9F',
    'A0BBA0',
    '90C090',
    '90C070',
    '90BB70',
    'B0AC70',
    'B0A040',
    '800080',
    '806080',
    '889988',
    '8AA080',
    '70AA70',
    '60BB60',
    '80B660',
    'A0B060',
    'B0A060',
    'BB9977',
    '660066',
    '665066',
    '667766',
    '408040',
    '209020',
    '409040',
    '609040',
    '409040',
    '409040',
    'A08060',
    '222288',
    '444466',
    '666644',
    '888860',
    '9A9A70',
    'A0A040',
    'B0B030',
    'D0C070',
    'C0A860',
    'B09055',
    '4444AA',
    '5555A0',
    '666690',
    '6A6A80',
    '707066',
    '808055',
    '999944',
    'A0A060',
    'B0B020',
    'D0C090',
    '6666BB',
    '7777AA',
    '888899',
    '999988',
    'AAAA77',
    'AAAA22',
    'BBBB66',
    'CCCC00',
    'DDDD70',
    'C0C010',
    '8888CC',
    '8888BB',
    '9696B0',
    'B0B0AA',
    'AAAA99',
    'B0B088',
    'C0C099',
    'CDCD90',
    'D0D080',
    'D0E070',
    'AAAADD',
    'ACACCC',
    'B0B0C0',
    'AAAABB',
    'B0B0AA',
    'BCBCA0',
    'D0D09A',
    'CCCC55',
    'DDDD44',
    'EEEE22',
    'CCCCEE',
    'CDCDDD',
    'DDDDCD',
    'DEDECC',
    'E0E0C0',
    'EEEEBB',
    'EFEFB0',
    'F9F0AA',
    'FAFAA0',
    'F0FD90',
    'DDDDFF',
    'EEEEEE',
    'EFEFDD',
    'EFEFCC',
    'EFEFBB',
    'FFFFAA',
    'EFEF99',
    'EFEF88',
    'EFEF66',
    'F0FF07',
    'A06A70',
    '905075',
    '804070',
    '79397F',
    '602A8C',
    '70408C',
    'A070AA',
    'A090AA',
    'A0AABB',
    'B0C0CC',
    'B07755',
    'AA7765',
    'A07775',
    'A07785',
    '907795',
    '9088A0',
    '8090A0',
    '70A099',
    '80A0A0',
    '88AAAA',
    'CD7010',
    'BB5000',
    'AA4010',
    'A03020',
    '991040',
    '800050',
    '707090',
    '608090',
    '7090A0',
    '8090AA',
    'EE8200',
    'C05915',
    'B04030',
    'A52A2A',
    'A02050',
    '9A6090',
    '7070A0',
    '6080AB',
    '5090BC',
    '40A0CD',
    'D05015',
    'CC1525',
    'BC2030',
    'B01060',
    '951F70',
    '802090',
    '7054AA',
    '5570B0',
    '3385BF',
    '5090BA',
    'EE0020',
    'CC0040',
    'BB0055',
    'B06090',
    'A090A0',
    '9090B0',
    'A0A0BB',
    'A0A0C0',
    '9090C0',
    '8080C0',
    'FF0740',
    'F02060',
    'E03080',
    'C050B0',
    'B060C8',
    'C080E0',
    'B070DD',
    '9070D0',
    '8070CC',
    '6666CC',
    'FF076A',
    'F01780',
    'E02790',
    'D040A0',
    'C050A0',
    'B060B0',
    'A070C0',
    '907ADD',
    '5077E0',
    '0082EE',
    'EF0780',
    'E02080',
    'D04090',
    'C060A0',
    'B080B0',
    'A080BB',
    '9085CC',
    '7592D0',
    '6096E0',
    '4499EE',
    'EF4090',
    'E050A0',
    'D060AD',
    'C070B0',
    'B088BC',
    'A096C0',
    '909CCC',
    '80A4D0',
    '70A0DD',
    '55AAEE',
    'F070B0',
    'E080B9',
    'D090BD',
    'C0A0C0',
    'B0ABC9',
    'A0AFD0',
    '90A9D6',
    '80ABDA',
    '70B0E0',
    '22BBEE',
    'FE80C0',
    'FE90C0',
    'F0A0C6',
    'E0AACC',
    'D0AFD0',
    'C0BBD4',
    'B0BDDA',
    'A0BFE0',
    '80C0E9',
    '10CCEE',
    'FE90DD',
    'FEA0DD',
    'F0B0DD',
    'E0B9DD',
    'D0BDDF',
    'C0C0E4',
    'AACCEA',
    'A0DFE9',
    'ADD8E6',
    '0DD8E6',
    'FEB0DD',
    'F0B9D0',
    'E0BDCC',
    'D0BDCC',
    'CCC0CC',
    'C0C8D0',
    'B8D4D8',
    'A0E0DD',
    '80E9F0',
    '0DEEEF',
    'FED0E0',
    'F0D9E9',
    'DDD0DD',
    'D0CCE0',
    'C0D4D8',
    'B0D8DF',
    'A0E0DF',
    '90E0D5',
    '0DEEF0',
    '90EED0',
    'FEE0EE',
    'F0DDE0',
    'E0E0E0',
    'D9DDE8',
    'D0DDE5',
    'C0DFE0',
    'B8E8E0',
    'BAEEE0',
    '20E9E0',
    '4ACFC0',
    'FFEEEE',
    'FAEEEE',
    'F0EEEE',
    'DDEEEE',
    'D0EEEE',
    'CDEEEE',
    'C0EEEE',
    //'A0E0DO',
    //'40E0DO',
    '60BAB0',
    'FFDDDD',
    'EFDDDD',
    'E0DDDD',
    'CCDDDD',
    'B0DDDD',
    'A0DDDD',
    '9ADDDD',
    '90D0D0',
    '50C5BF',
    '80AA9A',
    'EECCCC',
    'E0CCCC',
    'D0CCCC',
    'C0CCCC',
    'BBCCCC',
    'B0CCCC',
    'AACCCC',
    'A0CCCC',
    '80BBBB',
    '40AAA0',
    'DDBBBB',
    'D0BBBB',
    'CCBBBB',
    'C0BBBB',
    'B0BBBB',
    'AABBBB',
    '98BBBB',
    '8CBBBB',
    '70B0AA',
    '10AAAA',
    'BB9999',
    'B09999',
    'AA9999',
    'A09999',
    '909999',
    '8A9999',
    '809999',
    '7A9999',
    '709999',
    '609999',
    '997777',
    'AA7777',
    'A07777',
    '9A7777',
    '907777',
    '7A7777',
    '707777',
    '6A7777',
    '607777',
    '5A7777',
    '775555',
    '886060',
    '806060',
    '7A6060',
    '706060',
    '6A6060',
    '556060',
    '506060',
    '4A6060',
    '406060',
    '773333',
    '703333',
    '6A3333',
    '604040',
    '504A4A',
    '405050',
    '2A5A5A',
    '106060',
    '007070',
    '008080',
    '664444',
    '664E4E',
    '665050',
    '665555',
    '665A5A',
    '665F5F',
    '606060',
    '507070',
    '457A7A',
    '408888',
    '804444',
    '804A4A',
    '805050',
    '806A6A',
    '807070',
    '8A7A7A',
    '908080',
    '908A8A',
    '9A9090',
    '9A9A90',
    'A52A2A',
    'A54A4A',
    'A56060',
    'A57070',
    'A58080',
    'A59090',
    'A59A9A',
    'A5AA9A',
    'A5BB9A',
    'AABBAA',
    'CC3830',
    'CC4040',
    'D06060',
    'C07070',
    'C08080',
    'C09090',
    'C0A0A0',
    'C0B0B0',
    'C0CCB0',
    'C0D0C0',
    'E04030',
    'E04040',
    'E06040',
    'D07060',
    'D08070',
    'D09080',
    'D0A090',
    'D0B0A0',
    'D0C0B0',
    'D0D0C0',
    'D06015',
    'D07030',
    'D08040',
    'E09070',
    'E0A080',
    'E0B090',
    'E0D0A0',
    'E0D0B0',
    'E0E0B0',
    'E0EEC0',
    'F06040',
    'F08A58',
    'EE9070',
    'EEA070',
    'EEB080',
    'E0BB80',
    'E0C090',
    'E0CC80',
    'D0CC80',
    'CCCC90',
    'F07020',
    'F09020',
    'F0A020',
    'F0AA60',
    'F0BB70',
    'F0C080',
    'F0CC90',
    'EED0A0',
    'EEDDAA',
    'E0E0AA',
    'EE9000',
    'EEAA00',
    'F0C070',
    'F9D090',
    'FFDA90',
    'FCDD90',
    'FCE090',
    'FCEE90',
    'FCFC90',
    'F0FC90',
    'FFB000',
    'F9C040',
    'FFCC60',
    'FFD040',
    'F0DD60',
    'EED050',
    'E0D050',
    'E0E050',
    'E0E060',
    'E0F080',
    'EEB020',
    'EEBB30',
    'EEC000',
    'EECC20',
    'EECC50',
    'EED070',
    'EEDD80',
    'EEE090',
    'EEEE9A',
    'EEEEAA',
    'FFD700',
    'FFDA40',
    'FFDD60',
    'FFE060',
    'FCEC70',
    'FCFC90',
    'F8E8A0',
    'FCF0A0',
    'FCFFBB',
    'FCFFCC',
    '706660',
    '706640',
    '808070',
    '7A6622',
    '908033',
    '909080',
    '806622',
    '907733',
    '909060',
    '909975',
    '906622',
    '9C7733',
    '908844',
    '909966',
    'A0AA88',
    'A06622',
    'AA7733',
    'AA8844',
    'AA9966',
    'B0AA88',
    'B0B0A0',
    'B06622',
    'BB7733',
    'BB8844',
    'BB9966',
    'C0AA88',
    'C0B0A0',
    'CACABA',
    'C06622',
    'C07733',
    'DD8844',
    'CC9966',
    'D0AA88',
    'CCB0A0',
    'DDCABA',
    'DDDDD0',
    'D06622',
    'D07733',
    'FA8844',
    'DD9966',
    'FAAA88',
    'DDB0A0',
    'F0CABA',
    'F0DDD0',
    'F0EEE0',
    'D04422',
    'D05533',
    'FA6644',
    'FA8866',
    'FAA088',
    'FAAAA0',
    'FDCABA',
    'FADDD0',
    'FAEEE0',
    'FFFFF0',
    'D02222',
    'D03333',
    'FA4444',
    'FA6666',
    'FA8888',
    'FAA0A0',
    'FABABA',
    'FAD0D0',
    'FAE0E0',
    'FFF0F0',
    'C02222',
    'B03333',
    'DD4444',
    'DD6666',
    'D08888',
    'DDA0A0',
    'EEBABA',
    'EED0D0',
    'F0E0E0',
    'FDF0F0',
    'B02222',
    'A03333',
    'AA4444',
    'AA6666',
    'B08888',
    'CCA0A0',
    'DDBABA',
    'E0D0D0',
    'EAE0E0',
    'F8F0F0',
    '902222',
    '803333',
    '884444',
    '886666',
    'A08888',
    'BBA0A0',
    'C0BABA',
    'D0CACA',
    'E8E0E0',
    'F4F0F0',
    '222290',
    '333380',
    '444488',
    '666688',
    '8888A0',
    'A0A0BB',
    'BABAC0',
    'CACAD0',
    'E0E0E8',
    'F0F0F4',
    '2222A0',
    '3333A0',
    '4444AA',
    '6666AA',
    '8888AA',
    'A0A0CC',
    'CACADD',
    'D0D0E0',
    'E0E0EA',
    'F0F0F8',
    '2222B0',
    '3333B0',
    '4444DD',
    '6666DD',
    '8888DD',
    'A0A0EE',
    'BABAEE',
    'D0D0EE',
    'E0E0F0',
    'F0F0FD',
    '2222C0',
    '3333D0',
    '4444FA',
    '6666FA',
    '8888FA',
    'A0A0FA',
    'BABAFA',
    'CACAFA',
    'E0E0FA',
    'F0F0FF'
  ];

  @override
  void initState() {
    super.initState();
    initSpeechRecognition();
  }

  String seekCommando() {
    List<String> singleDigits = [
      'één',
      'twee',
      'drie',
      'vier',
      'vijf',
      'zes',
      'zeven',
      'acht',
      'negen'
    ];

    var words = transcription.split(' ');
    for (num i = 0; i < words.length; i++) {
      if (words[i] == 'Kleur' || words[i] == 'kleur') {
        if (words[i++].isNotEmpty) {
          var value = words[i];
          if (singleDigits.contains(value)) {
            value = (singleDigits.indexOf(value) + 1).toString();
          }
          return value;
        }
      }
    }
  }

  bool isNumeric(String s) {
    if (s == null) {
      return false;
    }
    return double.parse(s, (e) => null) != null;
  }

  void initSpeechRecognition() {
    _speechRecognition = SpeechRecognition();

    _speechRecognition.setCurrentLocaleHandler(
        (String locale) => setState(() => _currentLocale = locale));

    _speechRecognition.setAvailabilityHandler(
        (bool result) => setState(() => _isAvailable = result));

    _speechRecognition.setRecognitionStartedHandler(
        () => setState(() => _isListening = true));

    _speechRecognition
        .setRecognitionResultHandler((String speech) => setState(() {
              transcription = speech;
            }));

    _speechRecognition.setRecognitionCompleteHandler(
        () => setState(() => _isListening = false));

    _speechRecognition.activate().then(
          (result) => setState(() => _isAvailable = result),
        );

    /*_speechRecognition.listen(locale:_currentLocale).then((result)=> print('result : $result'));

    _speechRecognition.cancel();

    _speechRecognition.stop();*/
  }

  Color hexToColor(String code) {
    return Color(int.parse(code.substring(1, 7), radix: 16) + 0xFF000000);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: Text("Licht configurator"),
        ),
        body: Container(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.end,
            children: <Widget>[
              ColorPicker(
                pickerColor: currentColor,
                onColorChanged: changeColor,
                colorPickerWidth: MediaQuery.of(context).size.width,
                pickerAreaHeightPercent: 0.69,
                enableAlpha: false,
                displayThumbColor: true,
                enableLabel: true,
                paletteType: PaletteType.hsv,
              ),
              Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: <Widget>[
                    FlatButton(
                        onPressed: () {
                          showDialog(
                            context: context,
                            builder: (BuildContext context) {
                              return Scaffold(
                                body: CustomScrollView(
                                  primary: false,
                                  slivers: <Widget>[
                                    SliverAppBar(),
                                    SliverPadding(
                                      padding: const EdgeInsets.all(5.0),
                                      sliver: SliverGrid.count(
                                        crossAxisSpacing: 5.0,
                                        crossAxisCount: 4,
                                        children: hex.map((value) {
                                          String code = '#' + value;
                                          return Card(
                                              color: hexToColor(code),
                                              child: Center(
                                                  child: Text(
                                                      '${hex.indexOf(value) + 1}',
                                                      style: TextStyle(
                                                        color: Colors.black,
                                                        fontSize: 22.0,
                                                      ))));
                                          /*child: Image.network(
                                                "https://robohash.org/$index"));*/
                                        }).toList(),
                                      ),
                                    ),
                                  ],
                                ),
                                bottomNavigationBar: Padding(
                                  padding: EdgeInsets.all(8.0),
                                  child: RaisedButton(
                                    onPressed: () {
                                      Navigator.pop(context);
                                    },
                                    color: Colors.red,
                                    textColor: Colors.white,
                                    child: Text('Terug naar configurator',
                                        style: TextStyle(fontSize: 18.0)),
                                  ),
                                ),
                              );
                            },
                          );
                        },
                        color: Colors.red,
                        child: Row(
                          mainAxisSize: MainAxisSize.max,
                          children: <Widget>[
                            Icon(
                              Icons.apps,
                              color: Colors.white,
                              size: 28.0,
                            ),
                          ],
                        )),
                    FlatButton(
                        onPressed: () {},
                        color: Colors.red,
                        child: Row(
                          mainAxisSize: MainAxisSize.max,
                          children: <Widget>[
                            Icon(
                              Icons.cached,
                              color: Colors.white,
                              size: 32.0,
                            ),
                          ],
                        )),
                  ]),
              /*FlatButton.icon(
                onPressed: () {},
                color: Colors.red,
                
                icon: Icon(Icons.send, color: Colors.white),
                label: Text(
                  "Verstuur",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 22.0,
                  ),
                ),
              ),*/
              /*Center(
                child: RaisedButton(
                  elevation: 3.0,
                  onPressed: () {
                    showDialog(
                      context: context,
                      builder: (BuildContext context) {
                        return AlertDialog(
                          titlePadding: const EdgeInsets.all(0.0),
                          contentPadding: const EdgeInsets.all(0.0),
                          content: SingleChildScrollView(
                            child: ColorPicker(
                              pickerColor: currentColor,
                              onColorChanged: changeColor,
                              colorPickerWidth: 300.0,
                              pickerAreaHeightPercent: 0.7,
                              enableAlpha: false,
                              displayThumbColor: true,
                              enableLabel: true,
                              paletteType: PaletteType.hsv,
                            ),
                          ),
                        );
                      },
                    );
                  },
                  child: Text(
                    'Klik op mij',
                    style: TextStyle(
                      color: Colors.white,
                      fontFamily: 'Raleway',
                      fontSize: 18.0,
                    ),
                  ),
                  color: Colors.red,
                  textColor: Colors.white,
                ),
              ),*/
              Container(
                width: MediaQuery.of(context).size.width,
                padding: EdgeInsets.fromLTRB(0, 20.0, 0, 20.0),
                decoration: BoxDecoration(
                    border: Border(
                  top: BorderSide(width: 1.0, color: Colors.red[900]),
                )),
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(10.0, 0, 10.0, 0),
                  child: Text(transcription,
                      textAlign: TextAlign.start,
                      style: TextStyle(fontSize: 18.0)),
                ),
              ),
            ],
          ),
        ),
        bottomNavigationBar: BottomAppBar(
          color: Colors.red[600],
          child: Container(
            padding: EdgeInsets.all(10.0),
            margin: EdgeInsets.all(30.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              mainAxisSize: MainAxisSize.max,
              children: <Widget>[
                Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    mainAxisSize: MainAxisSize.max,
                    children: <Widget>[
                      Transform.scale(
                        scale: 1.5,
                        child: FloatingActionButton(
                          child: Icon(Icons.cancel),
                          mini: true,
                          backgroundColor: Colors.red[500],
                          onPressed: () {
                            if (_isListening) {
                              _speechRecognition.cancel().then(
                                    (result) => setState(() {
                                          _isListening = result;
                                          transcription = '';
                                        }),
                                  );
                            }
                          },
                        ),
                      ),
                      SizedBox(width: 40.0),
                      Transform.scale(
                        scale: 1.5,
                        child: FloatingActionButton(
                          child: Icon(Icons.mic),
                          backgroundColor: Colors.red,
                          onPressed: () {
                            if (_isAvailable && !_isListening) {
                              print('Started speech recognition');
                              _speechRecognition
                                  .listen(locale: 'nl_NL')
                                  .then((result) => print('$result'));
                            }
                          },
                        ),
                      ),
                      SizedBox(width: 40.0),
                      Transform.scale(
                        scale: 1.5,
                        child: FloatingActionButton(
                          child: Icon(Icons.stop),
                          mini: true,
                          backgroundColor: Colors.red[500],
                          onPressed: () {
                            if (_isListening) {
                              _speechRecognition.stop().then((result) =>
                                  setState(() => _isListening = result));

                              var value = seekCommando();

                              if (isNumeric(value)) {
                                print('Value: $value');
                              }
                            }
                          },
                        ),
                      ),
                    ]),
              ],
            ),
          ),
        ));
  }
}
